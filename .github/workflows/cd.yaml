name: Continuous Deployment to GKE

on:
  push:
    branches:
      - main # Trigger this workflow on pushes to the 'main' branch

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: iris-cluster
  GKE_ZONE: us-central1-a
  DEPLOYMENT_NAME: iris-api-deployment
  SERVICE_NAME: iris-api-service
  IMAGE_NAME: iris-api
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- NEW AUTHENTICATION STEP ADDED HERE ---
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          # This action specifically takes the service account key for authentication
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        # This action now just installs the SDK and sets the project ID.
        # It's no longer responsible for authentication with service_account_key.
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          # Removed service_account_key from here as per the warning.

      - name: Authenticate Docker to Google Container Registry
        # This command will now work because gcloud is already authenticated
        run: gcloud auth configure-docker gcr.io

      - name: Build Docker image
        run: docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image to GCR
        run: docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Get GKE credentials
        # This command will also work now because gcloud is authenticated
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}

      - name: Deploy to GKE
        run: |
          sed -i "s|gcr.io/\[YOUR_GCP_PROJECT_ID\]/iris-api:latest|gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}|g" kubernetes/deployment.yaml
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
          echo "Waiting for deployment rollout to complete..."
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }}
          echo "Service details:"
          kubectl get service ${{ env.SERVICE_NAME }}
